name: CI/CD pipeline

on:
  push:
    branches:
      - main
  pull_request_review:
    types: [submitted]

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.review.state == 'approved'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.11.0'

      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install
        env:
          PORT: ${{ secrets.PORT }}
          MONGO_URI: ${{ secrets.MONGO_URI }}

      # Run backend in background
      - name: Run backend in background
        working-directory: ./backend
        run: |
          nohup npm start &  # Run backend in the background
          echo "Waiting for backend to start..."
          while ! curl -s http://localhost:${{ secrets.PORT }}; do
            sleep 5  # Wait for the backend to start
          done
          echo "Backend is ready!"
        env:
          PORT: ${{ secrets.PORT }}
          MONGO_URI: ${{ secrets.MONGO_URI }}

      # Run backend unit-test
      - name: Run backend unit-test
        working-directory: ./backend
        run: npm run test
        env:
          PORT: ${{ secrets.PORT }}
          MONGO_URI: ${{ secrets.MONGO_URI }}

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      # Run frontend in background
      - name: Run frontend in background
        working-directory: ./frontend
        run: |
          nohup npm start &  # Run frontend in the background
          echo "Waiting for frontend to start..."
          while ! curl -s http://localhost:3000; do
            sleep 5  # Wait for the frontend to start
          done
          echo "Frontend is ready!"
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      # Run frontend unit-test
      - name: Run frontend unit-test
        working-directory: ./frontend
        run: npm run test-unit
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      # Run frontend integration-test
      - name: Run frontend integration-test
        working-directory: ./frontend
        run: npm run test-integration
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

  build_and_deploy:
    needs: test  # Runs only if 'test' job is successful
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Authenticate with Google Cloud
      - name: Set up GoogleCloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      #Generate timestamp for tagging
      - name: Generate timestamp for tagging
        id: vars
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      # Configure Docker to use Google Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}

      # Build and push backend image
      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/todo-backend-image:v${{ env.TIMESTAMP }} ./backend
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/todo-backend-image:v${{ env.TIMESTAMP }}
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REPO_NAME: ${{ secrets.GCP_REPO_NAME }}
          TIMESTAMP: ${{ env.TIMESTAMP }}
        
      # Build and push frontend image
      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/todo-frontend-image:v${{ env.TIMESTAMP }} ./frontend
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/todo-frontend-image:v${{ env.TIMESTAMP }}
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REPO_NAME: ${{ secrets.GCP_REPO_NAME }}
          TIMESTAMP: ${{ env.TIMESTAMP }}


      # Update deployments on GKE

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Configure GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}
        env:
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          CLUSTER_ZONE: ${{ secrets.CLUSTER_ZONE }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Update backend deployment
        run: |
          kubectl set image deployment/todo-backend-deployment todo-backend=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/todo-backend-image:v${{ env.TIMESTAMP }}
          kubectl rollout status deployment/todo-backend-deployment
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REPO_NAME: ${{ secrets.GCP_REPO_NAME }}
          TIMESTAMP: ${{ env.TIMESTAMP }}

      - name: Update frontend deployment
        run: |
          kubectl set image deployment/todo-frontend-deployment todo-frontend=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/todo-frontend-image:v${{ env.TIMESTAMP }}
          kubectl rollout status deployment/todo-frontend-deployment
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REPO_NAME: ${{ secrets.GCP_REPO_NAME }}
          TIMESTAMP: ${{ env.TIMESTAMP }}

      # Update deployments on GKE
      - name: Configure GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}
        env:
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          CLUSTER_ZONE: ${{ secrets.CLUSTER_ZONE }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Update backend deployment
        run: |
          kubectl set image deployment/todo-backend-deployment todo-backend=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/todo-backend-image:v${{ env.TIMESTAMP }}
          kubectl rollout status deployment/todo-backend-deployment
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REPO_NAME: ${{ secrets.GCP_REPO_NAME }}
          TIMESTAMP: ${{ env.TIMESTAMP }}

      - name: Update frontend deployment
        run: |
          kubectl set image deployment/todo-frontend-deployment todo-frontend=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/todo-frontend-image:v${{ env.TIMESTAMP }}
          kubectl rollout status deployment/todo-frontend-deployment
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REPO_NAME: ${{ secrets.GCP_REPO_NAME }}
          TIMESTAMP: ${{ env.TIMESTAMP }}